Here's a complete setup guide for the PersonalRoutineApp and its API, formatted for easy inclusion in a Microsoft Word document.

---

# Master Setup Instructions for PersonalRoutineApp and API

---

## Table of Contents
1. Overview
2. Prerequisites
3. Setting Up PersonalRoutineApp
   - Step 1: Organize Your Files
   - Step 2: Create the Python App File
   - Step 3: Create the API File
4. Usage Instructions
   - Step 4: Run the Application
   - Step 5: Run the API
5. API Endpoints
6. Conclusion

---

### 1. Overview

The PersonalRoutineApp is a Python-based application designed to help users manage their daily routines, set goals, and maintain a journal. This document provides step-by-step instructions for setting up and running the application on various platforms: Linux, macOS, ARM-based systems, and Android, along with the necessary API.

---

### 2. Prerequisites

- **Python 3.x**: Ensure Python is installed. Check by running:
  ```bash
  python3 --version
  ```

- **Required Libraries**:
  ```bash
  pip install pygame
  pip install SpeechRecognition
  pip install Flask
  pip install pyaudio
  ```

---

### 3. Setting Up PersonalRoutineApp

#### Step 1: Organize Your Files

1. **Create a Directory**:
   ```bash
   mkdir PersonalRoutineApp
   cd PersonalRoutineApp
   ```

#### Step 2: Create the Python App File

2. **Create a file named `personal_routine_app.py`** and add the following code:

```python
import tkinter as tk
from tkinter import simpledialog, messagebox, Listbox, Scrollbar
import pygame
import time
import threading

class AudioManager:
    def __init__(self):
        pygame.mixer.init()

    def play_audio(self, file):
        pygame.mixer.music.load(file)
        pygame.mixer.music.play()

class Journal:
    def __init__(self):
        self.entries = []

    def add_entry(self, prompt, response):
        self.entries.append(f"{prompt}: {response}")

    def get_entries(self):
        return "\n".join(self.entries)

class RoutineManager:
    def __init__(self):
        self.tasks = []
        self.current_task_index = 0

    def load_tasks(self, selected_tasks):
        self.tasks = selected_tasks
        self.current_task_index = 0

    def next_task(self):
        if self.current_task_index < len(self.tasks):
            task = self.tasks[self.current_task_index]
            self.current_task_index += 1
            return task
        return None

class PersonalRoutineApp:
    def __init__(self, master):
        self.master = master
        self.master.title("Personal Routine Tracker")

        self.audio_manager = AudioManager()
        self.journal = Journal()
        self.routine_manager = RoutineManager()

        self.available_tasks = [
            "Drink liquids", "Eat food", "Bathroom", "Waste disposal",
            "Wash hands", "Shave", "Brush teeth", "Shower",
            "Tidy house", "Morning online obligations", "Commute",
            "Chores", "Project work", "Yoga", "Lunch", "Nap",
            "Recovery", "Start dinner", "Journal with dinner"
        ]

        self.selected_tasks = []
        self.setup_ui()

    def setup_ui(self):
        self.label = tk.Label(self.master, text="Welcome to your Personal Routine Tracker!")
        self.label.pack()

        self.prompt_label = tk.Label(self.master, text="")
        self.prompt_label.pack()

        self.response_entry = tk.Entry(self.master)
        self.response_entry.pack()

        self.next_button = tk.Button(self.master, text="Next", command=self.skip_entry)
        self.next_button.pack()

        self.set_goals_button = tk.Button(self.master, text="Set Goals", command=self.set_goals)
        self.set_goals_button.pack()

        self.start_routine_button = tk.Button(self.master, text="Start Morning Routine", command=self.start_morning_routine)
        self.start_routine_button.pack()

        self.journal_button = tk.Button(self.master, text="View Journal", command=self.display_journal)
        self.journal_button.pack()

        self.alarm_button = tk.Button(self.master, text="Set Alarm", command=self.set_alarm)
        self.alarm_button.pack()

        self.task_selection_frame = tk.Frame(self.master)
        self.task_selection_frame.pack()

        self.task_listbox = Listbox(self.task_selection_frame, selectmode=tk.MULTIPLE)
        self.task_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        self.scrollbar = Scrollbar(self.task_selection_frame)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.task_listbox.config(yscrollcommand=self.scrollbar.set)
        self.scrollbar.config(command=self.task_listbox.yview)

        for task in self.available_tasks:
            self.task_listbox.insert(tk.END, task)

        self.add_task_button = tk.Button(self.master, text="Add Selected Tasks", command=self.add_selected_tasks)
        self.add_task_button.pack()

        self.remove_task_button = tk.Button(self.master, text="Remove Selected Tasks", command=self.remove_selected_tasks)
        self.remove_task_button.pack()

    def audio_prompt(self, prompt):
        self.prompt_label.config(text=prompt)
        self.audio_manager.play_audio("audio_prompt.mp3")  # Ensure you have this file
        time.sleep(3)
        self.response_entry.delete(0, tk.END)
        self.response_entry.focus_set()

    def record_response(self, prompt):
        response = self.response_entry.get()
        if response:
            self.journal.add_entry(prompt, response)
            messagebox.showinfo("Response Recorded", f"Your response: {response}")
        self.prompt_label.config(text="")
        self.response_entry.delete(0, tk.END)

    def next_task(self):
        task = self.routine_manager.next_task()
        if task:
            self.audio_prompt(task)
        else:
            messagebox.showinfo("Routine Complete", "You have completed your morning routine!")

    def skip_entry(self):
        self.next_task()

    def start_morning_routine(self):
        self.routine_manager.load_tasks(self.selected_tasks)
        self.next_task()

    def display_journal(self):
        journal_text = self.journal.get_entries()
        messagebox.showinfo("Evening Journal Entries", journal_text if journal_text else "No entries recorded.")

    def set_alarm(self):
        alarm_time = simpledialog.askstring("Set Alarm", "Enter alarm time (HH:MM):")
        threading.Thread(target=self.alarm_thread, args=(alarm_time,)).start()

    def alarm_thread(self, alarm_time):
        while True:
            current_time = time.strftime("%H:%M")
            if current_time == alarm_time:
                self.audio_prompt("It's time for your scheduled task!")
                break
            time.sleep(30)

    def add_selected_tasks(self):
        selected_indices = self.task_listbox.curselection()
        for index in selected_indices:
            task = self.available_tasks[index]
            if task not in self.selected_tasks:
                self.selected_tasks.append(task)

    def remove_selected_tasks(self):
        selected_indices = self.task_listbox.curselection()
        for index in selected_indices[::-1]:  # Remove from the end to avoid index shift
            task = self.available_tasks[index]
            if task in self.selected_tasks:
                self.selected_tasks.remove(task)

if __name__ == "__main__":
    root = tk.Tk()
    app = PersonalRoutineApp(root)
    root.mainloop()
```

#### Step 3: Create the API File

3. **Create another file named `api.py`** and add the following code:

```python
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)

goals = {}
journal_entries = []

@app.route('/api/v1/goals', methods=['POST'])
def set_goals():
    data = request.json
    goals['short_term'] = data.get('short_term_goal')
    goals['long_term'] = data.get('long_term_goal')
    return jsonify(message="Goals have been set!"), 200

@app.route('/api/v1/goals', methods=['GET'])
def get_goals():
    return jsonify(goals), 200

@app.route('/api/v1/journal', methods=['POST'])
def record_journal():
    entry = request.json.get('entry')
    if entry:
        journal_entries.append(entry)
        return jsonify(message="Journal entry recorded."), 200
    return jsonify(message="Entry cannot be empty."), 400

@app.route('/api/v1/journal', methods=['GET'])
def get_journal():
    return jsonify(entries=journal_entries), 200

@app.route('/api/v1/tasks', methods=['GET'])
def get_available_tasks():
    available_tasks = [
        "Drink liquids", "Eat food", "Bathroom", "Waste disposal",
        "Wash hands", "Shave", "Brush teeth", "Shower",
        "Tidy house", "Morning online obligations", "Commute",
        "Chores", "Project work", "Yoga", "Lunch", "Nap",
        "Recovery", "Start dinner", "Journal with dinner"
    ]
    return jsonify(tasks=available_tasks), 200

if __name__ == '__main__':
    app.run(debug=True)
```

---

### 4. Usage Instructions

#### Step 4: Run the Application

1. **Extract the Files** (if zipped):
   ```bash
   unzip PersonalRoutineApp.zip
   ```

2. **Navigate to the Directory**:
   ```bash
   cd PersonalRoutineApp


   ```

3. **Run the Application**:
   ```bash
   python3 personal_routine_app.py
   ```

#### Step 5: Run the API

1. **In another terminal, navigate to the same directory**:
   ```bash
   cd PersonalRoutineApp
   ```

2. **Run the API**:
   ```bash
   python3 api.py
   ```

---

### 5. API Endpoints

1. **Set Goals**:
   - **POST `/api/v1/goals`**: Set short-term and long-term goals.

2. **Get Goals**:
   - **GET `/api/v1/goals`**: Retrieve currently set goals.

3. **Record Journal Entry**:
   - **POST `/api/v1/journal`**: Add a journal entry.

4. **Get Journal Entries**:
   - **GET `/api/v1/journal`**: Retrieve all journal entries.

5. **Get Available Tasks**:
   - **GET `/api/v1/tasks`**: Returns a list of available tasks for selection.

---

### 6. Conclusion

By following these instructions, users can effectively set up and use the PersonalRoutineApp and its API across Linux, macOS, ARM-based systems, and Android, enabling efficient management of their routines and goals.

---

### Saving the Document

- Click on **File > Save As**.
- Choose the location where you want to save the document.
- Name the document (e.g., PersonalRoutineApp_Master_Instructions.docx).
- Click **Save**.

--- 

This structured document should help users set up the PersonalRoutineApp effectively. If you need further modifications or additional content, let me know!
